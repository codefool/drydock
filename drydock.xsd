<?xml version="1.0" encoding="UTF-8"?>
<!-- drydock.xsd - XML schema for starship definition Distributed under GNU 
	LESSER GENERAL PUBLIC LICENSE v2.1 (http://www.gnu.org/licenses/lgpl-2.1.html) 
	This project lives at http://github.com/codefool/drydock -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
	targetNamespace="urn:drydock.xsd" xmlns:tns="urn:drydock.xsd"
	elementFormDefault="qualified">
	<xs:complexType name="ComponentRef">
	    <xs:attribute name="id" type="xs:int"/>
		<xs:attribute name="type" type="xs:string"/>
		<xs:attribute name="order" type="xs:int"/>
	</xs:complexType>
	<xs:complexType name="WeaponRef">
	   <xs:attribute name="id" type="xs:int"/>
	   <xs:attribute name="type" type="xs:string"/>
	   <xs:attribute name="order" type="xs:int"/>
	   <xs:attribute name="firingArc" type="xs:string"/>
	</xs:complexType>
	<xs:complexType name="Section">
		<xs:annotation>
			<xs:documentation>
				A section is a basic container of components.
				id - the unique id of this section among all others
				name - the unique name of this section (optional)
				facing - the side to which the section presents
				capacity - the maximum capicity this section can hold
				component - the list of Components in this section
				weapon - the list of Weapons in this section
				neighbors - CSV list of id's/names of any sections connected to this one.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="component" type="tns:ComponentRef" minOccurs="0" maxOccurs="unbounded" />
            <xs:element name="weapon" type="tns:WeaponRef" minOccurs="0" maxOccurs="unbounded" />
			<xs:element name="neighbors" type="xs:string" minOccurs="0" maxOccurs="1" />
		</xs:sequence>
		<xs:attribute name="id" type="xs:int" use="required"/>
		<xs:attribute name="name" type="xs:string" />
		<xs:attribute name="facing" type="xs:string" use="required"/>
		<xs:attribute name="capacity" type="xs:int" use="required"/>
	</xs:complexType>
	<xs:complexType name="HullClass">
		<xs:annotation>
			<xs:documentation>
				A hull is a container of sections.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="section" type="tns:Section" minOccurs="1" maxOccurs="unbounded" />
		</xs:sequence>
		<xs:attribute name="id" type="xs:int" use="required"/>
		<xs:attribute name="name" type="xs:string"/>
		<xs:attribute name="facing" type="xs:string" use="required"/>
	</xs:complexType>
	<xs:complexType name="ShipClass">
		<xs:annotation>
			<xs:documentation>
				Defines a ship class, which is one-or-more hulls and several systems.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="hull" type="tns:HullClass" minOccurs="1" maxOccurs="unbounded" />
			<xs:element name="system" type="tns:SystemClass" minOccurs="0" maxOccurs="unbounded" />
		</xs:sequence>
		<xs:attribute name="guid" type="xs:unsignedLong" use="required"/>
		<xs:attribute name="name" type="xs:string" use="required"/>
		<xs:attribute name="mnemonic" type="xs:string" use="required"/>
		<xs:attribute name="crew" type="xs:int" use="required"/>
	</xs:complexType>
	<xs:simpleType name="Facing">
		<xs:restriction base="xs:string">
			<xs:enumeration value="A" />
			<xs:enumeration value="B" />
			<xs:enumeration value="C" />
			<xs:enumeration value="D" />
			<xs:enumeration value="E" />
			<xs:enumeration value="F" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="FiringArc">
		<xs:restriction base="xs:string">
			<xs:enumeration value="Front"/>
			<xs:enumeration value="Right-Front"/>
			<xs:enumeration value="Right"/>
			<xs:enumeration value="Rright-Rear"/>
			<xs:enumeration value="Rear"/>
			<xs:enumeration value="Left-Rear"/>
			<xs:enumeration value="Left"/>
			<xs:enumeration value="Left-Front"/>
			<xs:enumeration value="Front-Half"/>
			<xs:enumeration value="Right-Half"/>
			<xs:enumeration value="Rear-Half"/>
			<xs:enumeration value="Left-Half"/>
			<xs:enumeration value="Custom"/>
		</xs:restriction>
	</xs:simpleType>
    <xs:complexType name="ComponentClass">
        <xs:annotation>
            <xs:documentation>
                Defines a type of component.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="damageable" type="tns:DamageSpec" minOccurs="0" maxOccurs="1" />
            <xs:element name="flamable" type="tns:FlamableAttribute" minOccurs="0" maxOccurs="1" />
            <xs:element name="explosive" type="tns:ExplosiveAttribute" minOccurs="0" maxOccurs="1" />
            <xs:element name="reparable" type="tns:ReparableAttribute" minOccurs="0" maxOccurs="1" />
            <xs:element name="powersource" type="tns:PowerSourceAttribute" minOccurs="0" maxOccurs="1" />
            <xs:element name="powersink" type="tns:PowerSinkAttribute" minOccurs="0" maxOccurs="1" />
            <xs:element name="persistent" type="tns:PersistantAttribute" minOccurs="0" maxOccurs="1" />
            <xs:element name="regenerative" type="tns:RegenerativeAttribute" minOccurs="0" maxOccurs="1" />
            <xs:element name="buildable" type="tns:BuildableAttribute" minOccurs="0" maxOccurs="1" />
            <xs:element name="invulnerable" type="tns:InvulerableAttribute" minOccurs="0" maxOccurs="1" />
        </xs:sequence>
        <xs:attribute name="guid" type="xs:unsignedLong" use="required"/>
        <xs:attribute name="name" type="xs:string" use="required"/>
        <xs:attribute name="mnemonic" type="xs:string" use="required"/>
        <xs:attribute name="size" type="xs:int" use="required"/>
    </xs:complexType>
    <xs:complexType name="ChargingSpec">
       <xs:annotation>
           <xs:documentation>
           Specifies charging metrics for a component.
           cost - the amount of power required to charge the weapon
           time - the number of impulses required to charge the weapon
           hold - the amount of power required to hold the charged weapon
           maxHold - the maximum number of impulses the charged weapon may be held
           overCost - the amount of (additional) power required to 
                          overload the weapon
           overTime - the amount of (additional) time required to 
                          overload the weapon
           overHoldCost - the amount of (additional) power required to 
                              hold the overloaded weapon, once charged
           overMaxHold - the maximum number of impulses the overloaded
                             weapon may be held once charged.
           </xs:documentation>
       </xs:annotation>
        <xs:attribute name="cost" type="xs:int" use="required"/>
        <xs:attribute name="time" type="xs:int" use="required"/>
        <xs:attribute name="hold" type="xs:int" default="0"/>
        <xs:attribute name="maxHold" type="xs:int" default="0"/>
        <xs:attribute name="overCost" type="xs:int" default="0"/>
        <xs:attribute name="overTime" type="xs:int" default="0"/>
        <xs:attribute name="overHold" type="xs:int" default="0"/>
        <xs:attribute name="overMaxHold" type="xs:int" default="0"/>
    </xs:complexType>
	<xs:complexType name="EnergyWeaponClass">
	   <xs:annotation>
	       <xs:documentation>
	       The base class for energy weapons.
	       </xs:documentation>
	   </xs:annotation>
	   <xs:complexContent>
	       <xs:extension base="tns:ComponentClass">
	           <xs:sequence>
	               <xs:element name="charging" type="tns:ChargingSpec"/>
	           </xs:sequence>
               <xs:attribute name="damage" type="xs:int"/>
               <xs:attribute name="duration" type="xs:int" default="1"/>
	       </xs:extension>
	   </xs:complexContent>
	</xs:complexType>
	<xs:complexType name="DirectFireWeaponClass">
	   <xs:annotation>
	       <xs:documentation>
	       Defines a direct-fire weapon. Such weapons are point-to-point linear beam
	       with optional cones of effect.
	       cone - a HexWalker string the defines the hex's that are affected by the
	              discharge of the weapon.
	       minRange - the minimum range the weapon can target (default=1)
	       maxRange - the maximum effective range of the weapon.
	       entropy - the amount of energy lost per unit distance (constant or percentage).
	                 Specify constant as number &gt;= 1.0, and percentages as &lt; 1.0, e.g. .45
	       </xs:documentation>
	   </xs:annotation>
	   <xs:complexContent>
	       <xs:extension base="tns:EnergyWeaponClass">
	           <xs:sequence>
	               <xs:element name="cone" type="xs:string" minOccurs="0" maxOccurs="1"/>
	           </xs:sequence>
	           <xs:attribute name="minRange" type="xs:int" default="1"/>
               <xs:attribute name="maxRange" type="xs:int"/>
	           <xs:attribute name="entropy" type="xs:int" default="1"/>
	       </xs:extension>
	   </xs:complexContent>
	</xs:complexType>
	<xs:complexType name="SeekingWeaponClass">
       <xs:annotation>
           <xs:documentation>
           Defines a seeking weapon. Such weapons spawn another game chit which acts
           independently of its mother chit.
           </xs:documentation>
       </xs:annotation>
       <xs:complexContent>
           <xs:extension base="tns:EnergyWeaponClass">
               <xs:attribute name="range" type="xs:int"/>
               <xs:attribute name="initSpeed" type="xs:int"/>
               <xs:attribute name="maxSpeed" type="xs:int"/>
               <xs:attribute name="accelleration" type="xs:int"/>
               <xs:attribute name="turningClass" type="xs:int"/>
           </xs:extension>
       </xs:complexContent>
	</xs:complexType>
	<xs:complexType name="FlamableAttribute">
		<xs:annotation>
			<xs:documentation>
				Indicates this component is flamable.
				damage - the number of points damage the burning inflicts on the component per turn
				explosive - the percentage chance (cumulative) per turn that the component will explode. 
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="damage" type="xs:int" use="required"/>
		<xs:attribute name="explosive" type="xs:int"/>
	</xs:complexType>
	<xs:complexType name="ExplosionDamage">
	   <xs:sequence>
	       <xs:element name="radius" type="xs:int" default="1"/>
	       <xs:element name="decay" type="xs:int" default="1"/>
	   </xs:sequence>
	</xs:complexType>
	<xs:complexType name="ExplosiveAttribute">
		<xs:annotation>
			<xs:documentation>
				Indicates this component is explosive.
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="maxDamage" type="xs:int" />
	</xs:complexType>
	<xs:complexType name="ReparableAttribute">
		<xs:annotation>
			<xs:documentation>
				Indicates this component is reparable.
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="rate" type="xs:int" />
	</xs:complexType>
	<xs:complexType name="PowerSourceAttribute">
		<xs:annotation>
			<xs:documentation>
				Indicates this component is a power source.
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="rate" type="xs:int" />
	</xs:complexType>
	<xs:complexType name="PowerSinkAttribute">
		<xs:annotation>
			<xs:documentation>
				Indicates this component is a power sink.
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="rate" type="xs:int" />
	</xs:complexType>
	<xs:complexType name="PersistantAttribute">
		<xs:annotation>
			<xs:documentation>
				Indicates this component is a persistant (cannot be destroyed).
			</xs:documentation>
		</xs:annotation>
	</xs:complexType>
	<xs:complexType name="RegenerativeAttribute">
		<xs:annotation>
			<xs:documentation>
				Indicates this component is regenerative (can repair itself.)
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="rate" type="xs:int" />
	</xs:complexType>
	<xs:complexType name="BuildableAttribute">
		<xs:annotation>
			<xs:documentation>
				Indicates this component can be built.
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="cost" type="xs:int" use="required"/>
        <xs:attribute name="time" type="xs:int" use="required"/>
	</xs:complexType>
	<xs:complexType name="InvulerableAttribute">
		<xs:annotation>
			<xs:documentation>
				Indicates this component cannot be damaged.
			</xs:documentation>
		</xs:annotation>
	</xs:complexType>
	<xs:complexType name="SystemComponentClass">
		<xs:annotation>
			<xs:documentation>
				A component that is part of a ship's system. The id is the id of the
				component to include in the system, and the weight is the (optional) 
				percentage weight that this component's efficacy plays in the overall
				efficacy rating for the system. A weight of -1 means that the actual 
				weight is calculated after all specified weights of other components 
				have been accounted for. An overall system weight > 100% results in 
				an error.
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="id" type="xs:integer" />
		<xs:attribute name="weight" type="xs:integer" default="-1" />
	</xs:complexType>
	<xs:complexType name="SystemClass">
		<xs:annotation>
			<xs:documentation>
				A system is a collection of components that together provide some
				function.
				The part list contains of the guids of the components that make up the
				system and/or a list of component names.
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="componentRef" type="tns:SystemComponentClass"
				minOccurs="1" maxOccurs="unbounded" />
		</xs:sequence>
		<xs:attribute name="id" type="xs:int" />
		<xs:attribute name="name" type="xs:string" />
	</xs:complexType>
	<xs:complexType name="DamageSpec">
		<xs:annotation>
			<xs:documentation>
				disable = the amount of damage to disable the component
				destroy = the amount of damage to destroy the component (max damage)
				repairRate = the amount of damage that can be repaired per cycle.
				efficacyFactor = the weight of damage on the component's efficacy
				rating.
			</xs:documentation>
		</xs:annotation>
		<xs:attribute name="disable" type="xs:int" />
		<xs:attribute name="destroy" type="xs:int" />
		<xs:attribute name="repairRate" type="xs:int" default="0" />
		<xs:attribute name="efficacyFactor" type="xs:int" default="1" />
	</xs:complexType>
	<xs:complexType name="ComponentContainerClass">
		<xs:sequence>
			<xs:element name="component" type="tns:ComponentClass" minOccurs="0" maxOccurs="unbounded" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="CargoBayClass">
        <xs:annotation>
            <xs:documentation>
                Defines a cargo bay for a ship. The contents of a cargo bay are not connected, not 
                powered, or otherwise active. They can, however, be damaged and destroyed.
            </xs:documentation>
        </xs:annotation>
       <xs:complexContent>
		   <xs:extension base="tns:ComponentContainerClass">
		   </xs:extension>
       </xs:complexContent>
	</xs:complexType>
    <xs:complexType name="ShuttleBayClass">
        <xs:annotation>
            <xs:documentation>
                Defines a shuttle bay for a ship. 
            </xs:documentation>
        </xs:annotation>
       <xs:complexContent>
           <xs:extension base="tns:ComponentContainerClass">
           </xs:extension>
       </xs:complexContent>
    </xs:complexType>
	<xs:complexType name="Shield">
		<xs:annotation>
			<xs:documentation>
				int _overload; // overload amount
				int _max; // maximum shield
				int _level; // current shield level
				int _regen; // regenerate amount per turn
				int _powerUp; // amount of power to raise/sustain the shield
				int _powerReg; // amount of power to regen a point of strength
				int _powerOver; // amount of additional power to sustain an overloaded shield.
				bool _up; // true if shield is currently active
				bool _overloaded; // true if shield is being overloaded
				bool _regenerate; // true if shield is regenerating
			</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="overload" type="xs:int" />
			<xs:element name="max" type="xs:int" />
			<xs:element name="level" type="xs:int" />
			<xs:element name="regen" type="xs:int" />
			<xs:element name="powerUp" type="xs:int" />
			<xs:element name="powerReg" type="xs:int" />
			<xs:element name="powerOver" type="xs:int" />
			<xs:element name="up" type="xs:boolean" default="false" />
			<xs:element name="overloaded" type="xs:boolean" default="false" />
			<xs:element name="regenerate" type="xs:boolean" default="false" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="DryDock">
		<xs:sequence>
			<xs:element name="ship" type="tns:ShipClass" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="component" type="tns:ComponentClass" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="directFireWeapon" type="tns:DirectFireWeaponClass" minOccurs="0" maxOccurs="unbounded"/>
			<xs:element name="seekingWeapon" type="tns:SeekingWeaponClass" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="version" type="xs:string" />
	</xs:complexType>

	<xs:element name="drydock" type="tns:DryDock" />
</xs:schema>